---
- name: Install apt packages
  apt:
    state: present
    name:
      - libdbd-pg-perl
      - munin
  become: true

- stat:
    path: /usr/share/munin/plugins
  register: plugins_dir

- name: Create /etc/munin if it does not exist
  ansible.builtin.file:
    path: /etc/munin
    state: directory
    group: munin
    owner: munin
    mode: '0755'
    recurse: true
  become: true

- name: Create /usr/share/munin if it does not exist
  ansible.builtin.file:
    path: /usr/share/munin
    state: directory
    group: munin
    owner: munin
    mode: '0755'
    recurse: true
  become: true

- block:
  - name: Copy munin-node
    ansible.builtin.template:
      src: munin-node.j2
      dest: /etc/munin/munin-node

  - name: Copy munin.conf
    ansible.builtin.template:
      src: munin.conf.j2
      dest: /etc/munin/munin.conf

  - name: Create temporary template directory
    ansible.builtin.tempfile:
      state: directory
      suffix: munin-contrib
    register: munin_contrib_tmp_dir

  - name: Git clone contrib
    ansible.builtin.git:
      repo: 'https://github.com/munin-monitoring/contrib.git'
      dest: "{{ munin_contrib_tmp_dir.path }}"
    environment:
      PATH: "{{ ansible_env.PATH|default('')}}:/usr/local/bin:/usr/bin"

  - name: Copy templates
    ansible.builtin.copy:
      src: "{{ munin_contrib_tmp_dir.path }}/templates/munstrap/templates"
      dest: /etc/munin
      remote_src: true

  - name: Copy static
    ansible.builtin.copy:
      src: "{{ munin_contrib_tmp_dir.path }}/templates/munstrap/static"
      dest: /etc/munin
      remote_src: true

  - name: Let Munin regenerate HTML files
    file:
      state: absent
      path: /var/www/munin/*
    notify: "reload nginx"
  when: not (plugins_dir.stat.isdir is defined and plugins_dir.stat.isdir)
  become: true

- name: Copy plugins
  ansible.builtin.template:
    src: "{{ item }}"
    dest: "/usr/share/munin/plugins/{{ item | basename | regex_replace('\\.j2$', '') }}"
    remote_src: true
    mode: '0755'
  with_fileglob:
    - "templates/plugins/*"
  become: true

- name: Create symlinks for plugins
  ansible.builtin.file:
    src: "/usr/share/munin/plugins/{{ item | basename | regex_replace('\\.j2$', '') }}"
    dest: "/etc/munin/plugins/{{ item | basename | regex_replace('\\.j2$', '') }}"
    mode: '0777'
    state: link
  with_fileglob:
    - "templates/plugins/*"
  become: true

- name: "Disable squeezebox plugins"
  command: "bash -c 'rm /etc/munin/plugins/squeezebox_* || true'"
  changed_when: false
  become: true

- stat:
    path: "/var/lib/ns-api-python"
  register: ns_api_stat

- name: Git clone ns-api-python
  git:
    repo: 'https://github.com/evroon/ns-api-python'
    dest: "/var/lib/ns-api-python"
  become: true
  when: not (ns_api_stat.stat.isdir is defined and ns_api_stat.stat.isdir)
  environment:
    PATH: "{{ ansible_env.PATH|default('')}}:/usr/local/bin:/usr/bin"

- name: Git pull ns-api-python if exists
  git:
    repo: 'https://github.com/evroon/ns-api-python'
    dest: "/var/lib/ns-api-python"
  become: true
  become_user: munin
  when: (ns_api_stat.stat.isdir is defined and ns_api_stat.stat.isdir)
  environment:
    PATH: "{{ ansible_env.PATH|default('')}}:/usr/local/bin:/usr/bin"
    
- name: Change ownership of ns-api-python repo
  file:
    path: "/var/lib/ns-api-python"
    owner: "munin"
    group: "munin"
    state: directory
    recurse: yes
  become: true

- name: "Install pip requirements"
  command: "pip3 install -r /var/lib/ns-api-python/requirements.txt"
  changed_when: false
  become: true
  
- name: Place API key in .env
  ansible.builtin.lineinfile:
    path: "/var/lib/ns-api-python/.env"
    regexp: '^API_KEY='
    line: "API_KEY={{ ns_api_key }}"
    create: true
  become: true
  become_user: munin
