#!/usr/bin/env python3

import psycopg2
import datetime
import requests
import json
import time
import csv
import argparse


con = psycopg2.connect(database="${FR24_PSQL_DB}", user="${FR24_PSQL_USER}", password="${FR24_PSQL_PASSWORD}", host="127.0.0.1", port="${PSQL_PORT}")
print("Database opened successfully")


FLIGHTDATA_DB='flightdata'
AIRCRAFTDATA_DB='aircraftdata'

flightdata_columns = {
    'date_time': 'TIMESTAMP',
    'hex': 'TEXT',
    'flight': 'TEXT',
    'alt_baro': 'NUMERIC',
    'alt_geom': 'NUMERIC',
    'gs': 'NUMERIC',
    'ias': 'NUMERIC',
    'tas': 'NUMERIC',
    'mach': 'NUMERIC',
    'track': 'NUMERIC',
    'track_rate': 'NUMERIC',
    'roll': 'NUMERIC',
    'mag_heading': 'NUMERIC',
    'baro_rate': 'NUMERIC',
    'geom_rate': 'NUMERIC',
    'squawk': 'TEXT',
    'emergency': 'TEXT',
    'category': 'TEXT',
    'nav_qnh': 'NUMERIC',
    'nav_altitude_mcp': 'NUMERIC',
    'nav_heading': 'NUMERIC',
    'nav_modes': 'TEXT',
    'lat': 'NUMERIC',
    'lon': 'NUMERIC',
    'nic': 'NUMERIC',
    'rc': 'NUMERIC',
    'seen_pos': 'NUMERIC',
    'version': 'NUMERIC',
    'nic_baro': 'NUMERIC',
    'nac_p': 'NUMERIC',
    'nac_v': 'NUMERIC',
    'sil': 'NUMERIC',
    'sil_type': 'TEXT',
    'gva': 'NUMERIC',
    'sda': 'NUMERIC',
    'mlat': 'TEXT',
    'tisb': 'TEXT',
    'messages': 'NUMERIC',
    'seen': 'NUMERIC',
    'rssi': 'NUMERIC',

    'registration': 'TEXT',
    'aircrafttype': 'TEXT',
}

aircraftdata_columns = {
    'icao': 'TEXT',
    'registration': 'TEXT',
    'aircrafttype': 'TEXT',
}


def store_aircraftdata() -> None:
    print('Storing aircraft data in postgres...')

    with open('${PIAWARE_CSV_PATH}', 'r') as f:
        reader = csv.reader(f, delimiter=',')
        aggregated_data = []

        for aircraft in reader:
            aggregated_data.append({
                'icao': aircraft[0],
                'registration': aircraft[1],
                'aircrafttype': aircraft[2],
            })

        cur = con.cursor()
        data_values = ','.join([f'%({x})s' for x in aircraftdata_columns.keys()])
        columns_keys = ','.join(aircraftdata_columns.keys())
        args_str = ','.join(['(' + cur.mogrify(data_values, x).decode("utf-8") + ')' for x in aggregated_data])

        print(f'Found {len(aggregated_data)} aircraft.')
        cur.execute(f"INSERT INTO {AIRCRAFTDATA_DB} ({columns_keys}) VALUES {args_str}")
        con.commit()
        print('Aircraft data is stored.')


def get_aircraftdata(hexcode: str) -> dict:
    cur = con.cursor()
    cur.execute(f"SELECT * FROM {AIRCRAFTDATA_DB} WHERE icao=%(hex)s", {'hex': hexcode})
    rows = cur.fetchone()

    if rows is None:
        return {}

    return {
        'registration': rows[2],
        'aircrafttype': rows[3],
    }


def table_exists(table_name: str) -> bool:
    cur = con.cursor()
    cur.execute("select * from information_schema.tables where table_name=%s", (table_name,))
    return cur.rowcount > 0


def create_table(table_name: str, columns: dict) -> None:
    print(f'Creating table {table_name}')
    columns_query = ', '.join([f'{k} {v}' for k, v in columns.items()])

    cur = con.cursor()
    cur.execute(f'CREATE TABLE {table_name}(id SERIAL PRIMARY KEY, {columns_query});')
    con.commit()


def store_data(aggregated_data: list) -> None:
    print(f'Writing {len(aggregated_data)} entries to database.')

    cur = con.cursor()
    data_values = ','.join([f'%({x})s' for x in flightdata_columns.keys()])
    columns_keys = ','.join(flightdata_columns.keys())
    args_str = ','.join(['(' + cur.mogrify(data_values, x).decode("utf-8") + ')' for x in aggregated_data])

    cur.execute(f"INSERT INTO {FLIGHTDATA_DB} ({columns_keys}) VALUES {args_str}")
    con.commit()


def insert_data(batch_size: int, wait_period: float) -> None:
    aggregated_data = []

    print('Start collecting data...')
    while True:
        response = requests.get('${FR24_ADDRESS}')
        if response.ok:
            content = json.loads(response.content)

            for aircraft in content['aircraft']:
                # Store only entries with an altitude or location.
                if 'alt_baro' not in aircraft and 'lat' not in aircraft:
                    continue

                if 'flight' in aircraft:
                    aircraft['flight'] = aircraft['flight'].strip()

                if 'nav_modes' in aircraft:
                    aircraft['nav_modes'] = ','.join(aircraft['nav_modes'])

                aircraft['date_time'] = datetime.datetime.utcfromtimestamp(content['now'])
                aircraft['hex'] = aircraft['hex'].upper()

                acdata = get_aircraftdata(aircraft['hex'])

                if 'aircrafttype' in acdata:
                    aircraft['aircrafttype'] = acdata['aircrafttype']
                    aircraft['registration'] = acdata['registration']

                for key in flightdata_columns.keys():
                    if key not in aircraft:
                        aircraft[key] = None

                aggregated_data.append(aircraft)

                if len(aggregated_data) >= batch_size:
                    store_data(aggregated_data)
                    aggregated_data = []

        time.sleep(wait_period)


if __name__ == "__main__":
    parser = argparse.ArgumentParser(
        description='Stores ADS-B data in postgres database.',
        formatter_class=argparse.ArgumentDefaultsHelpFormatter,
    )
    parser.add_argument(
        '--batch-size',
        type=int,
        help='Number of entries to store in database per insertion.',
        default=1e3
    )
    parser.add_argument(
        '--wait-period',
        type=float,
        help='Update interval between dump1090 requests (s).',
        default=1
    )
    parser.add_argument(
        '--get-aircraft-type',
        type=str,
        help='Get the aircraft type given a hexcode.'
    )
    args = parser.parse_args()

    if not table_exists(AIRCRAFTDATA_DB):
        create_table(AIRCRAFTDATA_DB, aircraftdata_columns)
        store_aircraftdata()

    if not table_exists(FLIGHTDATA_DB):
        create_table(FLIGHTDATA_DB, flightdata_columns)

    if args.get_aircraft_type is not None:
        print(get_aircraftdata(args.get_aircraft_type))
    else:
        insert_data(args.batch_size, args.wait_period)
        con.close()
